# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков)
#для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, lists):
        self.input = lists

    def __str__(self):
        return '\n'.join([' '.join([str(el) for el in line]) for line in self.input])

    def __add__(self, other):
        result = ''
        if len(self.input) == len(other.input):
            for line_1, line_2 in zip(self.input, other.input):
                if len(line_1) != len(line_2):
                    print('Проверьте количество введенных значений матрицы')

                sum_matrix = [a1 + a2 for a1, a2 in zip(line_1, line_2)]
                result += ' '.join([str(i) for i in sum_matrix]) + '\n'
        else:
            return 'Проверьте количество введенных значений матрицы'
        return result

matrix_1 = Matrix([[1,1],[2,2],[3,3],[4,4]])
matrix_2 = Matrix([[5,1],[2,6],[7,3],[4,8]])

print(matrix_1, '\n')
print(matrix_2, '\n')
print(matrix_1 + matrix_2)



# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого проекта — одежда,
# которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5),
# для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: реализовать
# абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod

class Clothes(ABC):
    def __init__(self, parameters):
        self.parameters = parameters

    @abstractmethod
    def calculate(self):
        pass

class Coat(Clothes):

    @property
    def calculate(self):
        return (self.parameters / 6.5 + 0.5)

class Suit(Clothes):

    @property
    def calculate(self):
        return (2 * self.parameters + 0.3)

coat = Coat(5)
suit = Suit(6)

print(f'Для пальто потребуется: {coat.calculate:.2f} м2 ткани')
print(f'Для костюма потребуется: {suit.calculate:.2f} м2 ткани')


# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, number):
        self.number = number

    def make_order(self, rows):
        return '\n'.join(['*' * rows for _ in range(self.number // rows)]) + '\n' + '*' * (self.number % rows)


    def __add__(self, other):
        return (self.number + other.number)

    def __sub__(self, other):
        if self.number - other.number:
            return self.number - other.number
        else:
            return 'Вычитание возможно, если в первой клетке число больше, чем во второй'

    def __mul__(self, other):
        return (self.number * other.number)

    def __truediv__(self, other):
        return (self.number / other.number)

cell_1 = Cell(10)
cell_2 = Cell(5)
print(f'Клетка выглядит так:\n{cell_1.make_order(3)}')
print(f'Если сложить клетки, получится: {cell_1 + cell_2}')
print(f'Если вычесть из первой клетки вторую, получится: {cell_1 - cell_2}')
print(f'Если перемножить клетки, получится: {cell_1 * cell_2}')
print(f'Если поделить клетки, получится: {cell_1 / cell_2}')